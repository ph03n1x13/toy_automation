#!/usr/bin/env bash

#==========================================================================================
# snapsh is a simple script, collection of my frequently used commands after login
# into a personal box. 
#   
# Ishtiaque Foysol date: December 2, 2017 Sunday
#==========================================================================================


printf "\033c" # literally clear the screen

# ----------------- Date Time info -------------------
_time=`date`
echo -e "\e[1;32mDate:\e[0m $_time" 

uptime=`uptime | awk '{print $3 $4}' | cut -f1 -d , `
echo -e "\e[1;32muptime Day(s)/(H:M)-> \e[0m($uptime)"
myShell=$(echo $SHELL)
echo -e "\e[1;32mshell env:\e[0m $myShell" 
# ----------------------------------------------------


# -------------- User Info ----------------------
iAm=`whoami`
echo -e "\e[1;32mI am:\e[0m $iAm"
sp=${groups}
logged=`who`
echo -e "\e[1;32mLogged Users: \e[0m"
echo "$logged"
# ------------------Connected Displays ------------------------
displays=$(xrandr --query | grep connected)
echo -e "\e[1;32mConnected Dispaly/s: \e[0m"
echo "$displays"
packages=$(apt-cache pkgnames | wc -l)
echo -e "\e[1;32minstalled packages:\e[0m $packages"

# -------------------- Battery Info 
vendor=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep vendor | awk '{print $2}')
state=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep state | awk '{print $2}')
percentage=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep percentage | awk '{print $2}')
technology=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep technology | awk '{print $2}')
timeEmpty=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep 'time to empty' | awk '{print $4,$5}')

echo -e "\e[1;32mbattery info \e[0m"
echo -e "\e[1;32mvendor: \e[0m$vendor"
echo -e "\e[1;32mstate: \e[0m$state"
echo -e "\e[1;32mpercentage: \e[0m$percentage"
echo -e "\e[1;32mtechnology: \e[0m$technology"
echo -e "\e[1;32mtime to empty: \e[0m$timeEmpty"


# -------------------- OS Info ------------------

echo -e "\e[1;32mOS Info [Dist Release KernVersion]: \e[0m"

declare -a switches=("-o" "-r" "-v")
for command in "${switches[@]}"
    do
        echo `uname $command`
    done    
distro=`cat /etc/issue`
echo "$distro"
    
# ----------------------- CPU/MoBo Info ---------------------

processor=$(dmidecode -s processor-version)
echo -e "\e[1;32mprocessor: \e[0m"   
echo "$processor"
echo -e "\e[1;32mcores: \e[0m"
cores=$(nproc)
echo "$cores"
freq=$(dmidecode -s processor-frequency)
echo -e "\e[1;32mfrequency: \e[0m"   
echo "$freq"
mobo=$(dmidecode -s baseboard-manufacturer)
echo -e "\e[1;32mMoBo: \e[0m"   
echo "$mobo"
model=$(dmidecode -s baseboard-product-name)
echo -e "\e[1;32mMoBo model: \e[0m"   
echo "$model"
bios_vendor=$(dmidecode -s bios-vendor)
echo -e "\e[1;32mbios vendor: \e[0m"   
echo "$bios_vendor"
release_date=$(dmidecode -s bios-release-date)
echo -e "\e[1;32mrelease date: \e[0m"   
echo "$release_date"
# print bugs if exist 
bugs=$(cat  /proc/cpuinfo  | grep bugs -m 1 | cut -f2- -d ' ' )
echo -e "\e[1;33mbugs: \e[0m"
echo "$bugs"
# ----------- Memory Info -------------

echo -e "\e[1;32mRAM:\e[0m"
mem_type=$(dmidecode -t 17 | grep "Type:" | awk '{print $2}')
echo "ram type: $mem_type"
max_cap=$(dmidecode -t 16 | grep "Maximum" | awk '{print $3$4}')
echo "max capacity: $max_cap"
total=$(cat /proc/meminfo | grep "^MemTotal"| awk '{print $2}' )
free=$(cat /proc/meminfo | grep "^MemFree"| awk '{print $2}' )
Mtotal=`echo "scale=2;$total / (1024 *1024) " | bc`
Mfree=`echo "scale=2;$free / (1024*1024)" |bc`
used=`echo "scale=2; $Mtotal - $Mfree"|bc`
swapKB=$(cat /proc/swaps | grep "swap" | awk '{print $3}')
swapGB=$(echo "scale=2; 3145724 / (1024*1024)" | bc)
echo "total: $Mtotal Gib"
echo "used: $used Gib"
echo "free: $Mfree Gib"
echo "swap: $swapGB GiB"

# --------- Disk Info --------------------
diskU=`df -h  | grep "File\|^/dev/sd*"` 
echo -e "\e[1;32mDisk Use [*Mounted]: \e[0m"
echo "$diskU"
conInfo=$(dmidecode --type connector)
echo -e "\e[1;32mdisk connector info: \e[0m"
echo "$conInfo"

check_net() {
     ping -q -c 5 -W 1  8.8.8.8  >/dev/null 
}

check_net
if [ $? -eq 0  ] ; then 
    echo -e "\e[1;32mNet Status:[+]Connected\e[0m"
    gateway=$(ip route | grep "default" | cut -d" " -f3)
    echo -e "\e[1;32mgateway(router) IP:\e[0m $gateway"
    localIP=`hostname -I`
    echo -e "\e[1;32mlocal IP:\e[0m $localIP"
    pubIP=$(host  myip.opendns.com resolver1.opendns.com | grep "address" | awk '{print $4}')
    echo -e "\e[1;32mpublic IP:\e[0m $pubIP"
else
     echo -e "\e[1;33mNet Status:[-]Not Connected\e[0m"   
     #echo "$?"

fi

# ------- Frequently used service daemons ---------- 
_ssh=$(systemctl status ssh.service | sed -n 3p | cut -d":" -f2)
echo -e "\e[1;32mSSH daemon: \e[0m"
echo "$_ssh"