#!/usr/bin/env bash

#==========================================================================================
# snapsh is a simple script, collection of my frequently used commands after login
# into a personal box. 
#   
# Ishtiaque Foysol date: December 2, 2017 Sunday
#==========================================================================================


printf "\033c" # literally clear the screen

print_info(){
    echo -e "\e[1;32m$1\e[0m "
    echo "$2"    
}

print_one_line(){
    echo -e "\e[1;32m$1\e[0m " "$2"    
}

print_alert(){
    echo -e "\e[1;31m$1\e[0m "
    echo "$2"    
}

# ----------------- Date Time info -------------------
_time=`date`
print_info "Date: " "$_time"
uptime=`uptime | awk '{print $3 $4}' | cut -f1 -d , `
print_info "uptime Day(s)/(H:M)-> " "$uptime"
my_shell=$(echo $SHELL)
print_info "shell env: " "$my_shell" 
# ----------------------------------------------------


# -------------- User Info ----------------------
i_am=`whoami`
print_info "I am:" "$i_am"
logged=`who`
print_info "Logged Users: " "$logged"
# ------------------Connected Displays ------------------------
displays=$(xrandr --query | grep connected)
print_info "Connected Dispaly/s: " "$displays"
packages=$(apt-cache pkgnames | wc -l)
print_info "installed packages: " "$packages"

# -------------------- Battery Info 
vendor=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep vendor | awk '{print $2}')
state=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep state | awk '{print $2}')
percentage=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep percentage | awk '{print $2}')
technology=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep technology | awk '{print $2}')
time_empty=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep 'time to empty' | awk '{print $4,$5}')

print_one_line "battery info: " "$vendor"
print_one_line "state: " "$state"
print_one_line "percentage:" "$percentage"
print_one_line "technology:" "$technology"
print_one_line "time to empty:" "$time_empty"

# -------------------- OS Info ------------------

print_one_line "OS Info [Dist Release KernVersion]: "
declare -a switches=("-o" "-r" "-v")
for command in "${switches[@]}"
    do
        echo $(uname $command)
    done    
distro=`cat /etc/issue`
echo "$distro"
    
# ----------------------- CPU/MoBo Info ---------------------

processor=$(dmidecode -s processor-version)
print_one_line "processor: " "$processor"
cores=$(nproc)
print_one_line "cores: " "$cores"
freq=$(dmidecode -s processor-frequency)
print_one_line "frequency: " "$freq"
mobo=$(dmidecode -s baseboard-manufacturer)
print_one_line "MoBo: " "$mobo"
model=$(dmidecode -s baseboard-product-name)
print_one_line "MoBo model: " "$model"
bios_vendor=$(dmidecode -s bios-vendor)
print_one_line "bios vendor: " "$bios_vendor"
release_date=$(dmidecode -s bios-release-date)
print_one_line "release date: " "$release_date"
# print bugs if exist 
bugs=$(cat  /proc/cpuinfo  | grep bugs -m 1 | cut -f2- -d ' ' )
print_alert "cpu bugs" "$bugs"

# ----------- Memory Info -------------

print_one_line "RAM:"
mem_type=$(dmidecode -t 17 | grep "Type:" | awk '{print $2}')
echo "ram type: $mem_type"
max_cap=$(dmidecode -t 16 | grep "Maximum" | awk '{print $3$4}')
echo "max capacity: $max_cap"
total=$(cat /proc/meminfo | grep "^MemTotal"| awk '{print $2}' )
free=$(cat /proc/meminfo | grep "^MemFree"| awk '{print $2}' )
Mtotal=`echo "scale=2;$total / (1024 *1024) " | bc`
Mfree=`echo "scale=2;$free / (1024*1024)" |bc`
used=`echo "scale=2; $Mtotal - $Mfree"|bc`
swapKB=$(cat /proc/swaps | grep "swap" | awk '{print $3}')
swapGB=$(echo "scale=2; 3145724 / (1024*1024)" | bc)
echo "total: $Mtotal Gib"
echo "used: $used Gib"
echo "free: $Mfree Gib"
echo "swap: $swapGB GiB"

# --------- Disk Info --------------------
disk_usage=`df -h  | grep "File\|^/dev/sd*"` 
print_one_line "disk use [*Mounted]: "
echo "$disk_usage"
conInfo=$(dmidecode --type connector)
print_one_line "disk connector info: "
echo "$conInfo"

check_net() {
     ping -q -c 5 -W 1  8.8.8.8  >/dev/null 
}

check_net
if [ $? -eq 0  ] ; then 
    print_one_line "Net Status:[+]Connected"
    gateway=$(ip route | grep "default" | cut -d" " -f3)
    print_one_line "gateway(router) IP:" "$gateway"
    local_IP=`hostname -I`
    print_one_line "local IP: " "$local_IP"
    pub_IP=$(host  myip.opendns.com resolver1.opendns.com | grep "address" | awk '{print $4}')
    print_one_line "public IP:" "$pub_IP"
else
     print_one_line "Net Status:[-]Not Connected"   
     

fi
connections=$(sudo ss | grep tcp | awk '{print $5, $6}')
print_alert "TCP network connections: " "$connections"


# ------- Frequently used service daemons ---------- 
_ssh=$(systemctl status ssh.service | sed -n 3p | cut -d":" -f2)
print_one_line "SSH daemon: " "$_ssh"